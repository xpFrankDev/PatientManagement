/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Clases.Generos;
import Clases.GrupoVulnerable;
import Clases.NotaEvolucion;
import Clases.Paciente;
import Clases.SRQ18;
import Clases.exportarExcel;
import Clases.tools;
import Ventanas.verGrafico;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author parra
 */
public class panelFiltrosMonitoreo extends javax.swing.JPanel {

    ArrayList<Integer> meses = new ArrayList();
    String temp = "";
    int ano = Integer.parseInt(new SimpleDateFormat("yyyy").format(new Date()).toString());
    String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
    String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();
    JTable tabla = new JTable();
    DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

    public panelFiltrosMonitoreo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSPanelRound3 = new rojeru_san.rspanel.RSPanelRound();
        jLabel3 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        comboProyecto = new javax.swing.JComboBox<>();
        comboProyectoAno = new javax.swing.JComboBox<>();
        rSPanelRound6 = new rojeru_san.rspanel.RSPanelRound();
        jLabel6 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        comboProyectoMes = new javax.swing.JComboBox<>();
        rSPanelRound2 = new rojeru_san.rspanel.RSPanelRound();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        comboSexo = new javax.swing.JComboBox<>();
        comboSexoAno = new javax.swing.JComboBox<>();
        rSPanelRound5 = new rojeru_san.rspanel.RSPanelRound();
        jLabel5 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        comboIntencionAno = new javax.swing.JComboBox<>();
        rSPanelRound1 = new rojeru_san.rspanel.RSPanelRound();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        comboResumenGeneralAno = new javax.swing.JComboBox<>();
        rSPanelRound4 = new rojeru_san.rspanel.RSPanelRound();
        jLabel4 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        comboGrupoVulnerableAno = new javax.swing.JComboBox<>();
        comboGrupoVulnerable = new javax.swing.JComboBox<>();
        rSPanelRound7 = new rojeru_san.rspanel.RSPanelRound();
        jLabel7 = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        comboSesionesResumen = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(230, 230, 230));

        rSPanelRound3.setForeground(new java.awt.Color(51, 51, 51));
        rSPanelRound3.setAnchoBorde(2.0F);
        rSPanelRound3.setColorBackground(new java.awt.Color(230, 230, 230));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Pacs. por Proyecto Detalle");

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_microsoft_excel_32px.png"))); // NOI18N
        jButton7.setContentAreaFilled(false);
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_futures_24px.png"))); // NOI18N
        jButton8.setContentAreaFilled(false);
        jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        comboProyecto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "ACNUR", "PDAF" }));

        comboProyectoAno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2022", "2021", "2020", "2019", "2018" }));

        javax.swing.GroupLayout rSPanelRound3Layout = new javax.swing.GroupLayout(rSPanelRound3);
        rSPanelRound3.setLayout(rSPanelRound3Layout);
        rSPanelRound3Layout.setHorizontalGroup(
            rSPanelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rSPanelRound3Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(rSPanelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(comboProyectoAno, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(comboProyecto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        rSPanelRound3Layout.setVerticalGroup(
            rSPanelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(rSPanelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(rSPanelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound3Layout.createSequentialGroup()
                    .addGap(54, 54, 54)
                    .addGroup(rSPanelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboProyecto, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboProyectoAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(55, Short.MAX_VALUE)))
        );

        rSPanelRound6.setForeground(new java.awt.Color(51, 51, 51));
        rSPanelRound6.setAnchoBorde(2.0F);
        rSPanelRound6.setColorBackground(new java.awt.Color(230, 230, 230));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Pacientes por Proyecto x a√±o");

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_microsoft_excel_32px.png"))); // NOI18N
        jButton13.setContentAreaFilled(false);
        jButton13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        comboProyectoMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2022", "2021", "2020", "2019", "2018" }));

        javax.swing.GroupLayout rSPanelRound6Layout = new javax.swing.GroupLayout(rSPanelRound6);
        rSPanelRound6.setLayout(rSPanelRound6Layout);
        rSPanelRound6Layout.setHorizontalGroup(
            rSPanelRound6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rSPanelRound6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addGroup(rSPanelRound6Layout.createSequentialGroup()
                        .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(rSPanelRound6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound6Layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(comboProyectoMes, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );
        rSPanelRound6Layout.setVerticalGroup(
            rSPanelRound6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jButton13)
                .addContainerGap())
            .addGroup(rSPanelRound6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound6Layout.createSequentialGroup()
                    .addGap(52, 52, 52)
                    .addComponent(comboProyectoMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(53, Short.MAX_VALUE)))
        );

        rSPanelRound2.setForeground(new java.awt.Color(51, 51, 51));
        rSPanelRound2.setAnchoBorde(2.0F);
        rSPanelRound2.setColorBackground(new java.awt.Color(230, 230, 230));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Pacientes por Genero");

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_microsoft_excel_32px.png"))); // NOI18N
        jButton5.setContentAreaFilled(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_futures_24px.png"))); // NOI18N
        jButton6.setContentAreaFilled(false);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        comboSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboSexoAno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2022", "2021", "2020", "2019", "2018" }));

        javax.swing.GroupLayout rSPanelRound2Layout = new javax.swing.GroupLayout(rSPanelRound2);
        rSPanelRound2.setLayout(rSPanelRound2Layout);
        rSPanelRound2Layout.setHorizontalGroup(
            rSPanelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rSPanelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(rSPanelRound2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rSPanelRound2Layout.createSequentialGroup()
                        .addComponent(comboSexoAno, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        rSPanelRound2Layout.setVerticalGroup(
            rSPanelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rSPanelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSexoAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(rSPanelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        rSPanelRound5.setForeground(new java.awt.Color(51, 51, 51));
        rSPanelRound5.setAnchoBorde(2.0F);
        rSPanelRound5.setColorBackground(new java.awt.Color(230, 230, 230));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Pacientes c/Intenci√≥n Suicida.");

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_microsoft_excel_32px.png"))); // NOI18N
        jButton11.setContentAreaFilled(false);
        jButton11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_futures_24px.png"))); // NOI18N
        jButton12.setContentAreaFilled(false);
        jButton12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        comboIntencionAno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2022", "2021", "2020", "2019", "2018" }));

        javax.swing.GroupLayout rSPanelRound5Layout = new javax.swing.GroupLayout(rSPanelRound5);
        rSPanelRound5.setLayout(rSPanelRound5Layout);
        rSPanelRound5Layout.setHorizontalGroup(
            rSPanelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rSPanelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addGroup(rSPanelRound5Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(rSPanelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound5Layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(comboIntencionAno, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );
        rSPanelRound5Layout.setVerticalGroup(
            rSPanelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(rSPanelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(rSPanelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound5Layout.createSequentialGroup()
                    .addGap(52, 52, 52)
                    .addComponent(comboIntencionAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(53, Short.MAX_VALUE)))
        );

        rSPanelRound1.setForeground(new java.awt.Color(51, 51, 51));
        rSPanelRound1.setAnchoBorde(2.0F);
        rSPanelRound1.setColorBackground(new java.awt.Color(230, 230, 230));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Resumen Atenciones");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_microsoft_excel_32px.png"))); // NOI18N
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        comboResumenGeneralAno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2022", "2021", "2020", "2019", "2018" }));

        javax.swing.GroupLayout rSPanelRound1Layout = new javax.swing.GroupLayout(rSPanelRound1);
        rSPanelRound1.setLayout(rSPanelRound1Layout);
        rSPanelRound1Layout.setHorizontalGroup(
            rSPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rSPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rSPanelRound1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)))
            .addGroup(rSPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound1Layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(comboResumenGeneralAno, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );
        rSPanelRound1Layout.setVerticalGroup(
            rSPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(rSPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound1Layout.createSequentialGroup()
                    .addGap(56, 56, 56)
                    .addComponent(comboResumenGeneralAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(56, Short.MAX_VALUE)))
        );

        rSPanelRound4.setForeground(new java.awt.Color(51, 51, 51));
        rSPanelRound4.setAnchoBorde(2.0F);
        rSPanelRound4.setColorBackground(new java.awt.Color(230, 230, 230));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Pacientes por Grupo Vul.");

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_microsoft_excel_32px.png"))); // NOI18N
        jButton9.setContentAreaFilled(false);
        jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_futures_24px.png"))); // NOI18N
        jButton10.setContentAreaFilled(false);
        jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        comboGrupoVulnerableAno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2022", "2021", "2020", "2019", "2018" }));

        comboGrupoVulnerable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "ACNUR", "PDAF" }));

        javax.swing.GroupLayout rSPanelRound4Layout = new javax.swing.GroupLayout(rSPanelRound4);
        rSPanelRound4.setLayout(rSPanelRound4Layout);
        rSPanelRound4Layout.setHorizontalGroup(
            rSPanelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rSPanelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(rSPanelRound4Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
            .addGroup(rSPanelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(comboGrupoVulnerableAno, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(comboGrupoVulnerable, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        rSPanelRound4Layout.setVerticalGroup(
            rSPanelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(rSPanelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(rSPanelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound4Layout.createSequentialGroup()
                    .addGap(52, 52, 52)
                    .addGroup(rSPanelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboGrupoVulnerable, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboGrupoVulnerableAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(53, Short.MAX_VALUE)))
        );

        rSPanelRound7.setForeground(new java.awt.Color(51, 51, 51));
        rSPanelRound7.setAnchoBorde(2.0F);
        rSPanelRound7.setColorBackground(new java.awt.Color(230, 230, 230));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Sesiones x Paciente Resumen");

        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_microsoft_excel_32px.png"))); // NOI18N
        jButton14.setContentAreaFilled(false);
        jButton14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        comboSesionesResumen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2022", "2021", "2020", "2019", "2018" }));

        javax.swing.GroupLayout rSPanelRound7Layout = new javax.swing.GroupLayout(rSPanelRound7);
        rSPanelRound7.setLayout(rSPanelRound7Layout);
        rSPanelRound7Layout.setHorizontalGroup(
            rSPanelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rSPanelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addGroup(rSPanelRound7Layout.createSequentialGroup()
                        .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(rSPanelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound7Layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(comboSesionesResumen, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );
        rSPanelRound7Layout.setVerticalGroup(
            rSPanelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelRound7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jButton14)
                .addContainerGap())
            .addGroup(rSPanelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelRound7Layout.createSequentialGroup()
                    .addGap(52, 52, 52)
                    .addComponent(comboSesionesResumen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(53, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rSPanelRound1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(rSPanelRound2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(rSPanelRound3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rSPanelRound4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(rSPanelRound5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(rSPanelRound6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rSPanelRound7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rSPanelRound1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rSPanelRound2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rSPanelRound3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rSPanelRound4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rSPanelRound5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rSPanelRound6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rSPanelRound7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        tabla = new JTable();
        modelo = (DefaultTableModel) tabla.getModel();

        int ano = Integer.parseInt(comboSexoAno.getSelectedItem().toString());
        String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
        String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();
        String proyectox = Float.compare(comboProyecto.getSelectedIndex(), 0) == 0
                ? ""
                : comboProyecto.getSelectedItem().toString();
        new Thread(panelMonitoreo::verBarra).start();
        new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    modelo.addColumn("#");
                    modelo.addColumn("ID");
                    modelo.addColumn("C√≥digo");
                    modelo.addColumn("Nombres");
                    modelo.addColumn("apellidos");
                    modelo.addColumn("Tipo de Documento");
                    modelo.addColumn("N¬∞ DNI");
                    modelo.addColumn("Genero");
                    modelo.addColumn("Fecha Creaci√≥n");
                    modelo.addColumn("Fecha Nacimiento");
                    modelo.addColumn("Total Sesiones");
                    modelo.addColumn("Telefono");
                    modelo.addColumn("TelefonoOpcional");
                    modelo.addColumn("Correo");
                    modelo.addColumn("Nacionalidad");
                    modelo.addColumn("Condici√≥n Migratoria");
                    modelo.addColumn("Departamento");
                    modelo.addColumn("Provincia");
                    modelo.addColumn("Distrito");
                    modelo.addColumn("Grupo Vulnerable");
                    modelo.addColumn("Discapacidad");
                    modelo.addColumn("¬øRed Soporte?");
                    modelo.addColumn("Nombre red Soporte");
                    modelo.addColumn("SRQ Inicial");
                    modelo.addColumn("Observaci√≥n");
                    modelo.addColumn("Proyecto");
                    modelo.addColumn("Motivo Consulta");
                    modelo.addColumn("Acciones");

                    ArrayList<Paciente> pacientes
                            = (ArrayList) new Paciente().getPacientexProyecto(proyectox, fecha01, fecha02).clone();
                    int cont = 1;
                    for (Paciente paciente : pacientes) {
                        modelo.addRow(new Object[]{cont++,
                            paciente.getId(), paciente.getCodigo(), paciente.getNombres(), paciente.getApellidos(), paciente.getTipoDocumento(), paciente.getDni(), paciente.getGenero(),
                            paciente.getFechaCreacion(), paciente.getFechaNacimiento(), paciente.getTotalSesiones(), paciente.getTelefono(),paciente.getTelefonoOpcional(), paciente.getCorreo(), paciente.getNacionalidad(),
                            paciente.getCondicionMigratoria(), paciente.getDepartamento(), paciente.getProvincia(), paciente.getDistrito(), paciente.getGrupoVulnerable(), paciente.getDiscapacidad(), paciente.getRedSoporte(), paciente.getNombreRedSoporte(),
                            paciente.getSrqIngreso(), paciente.getObservacion(), paciente.getProyecto(), paciente.getMotivoConsulta(), paciente.getAcciones()
                        });
                    }
                    new exportarExcel().exportarExcel(tabla, "Pacientes Registrados del Proyecto " + proyectox + " del a√±o " + ano);
                    new Thread(panelMonitoreo::verBarra).start();

                } catch (IOException ex) {
                    Logger.getLogger(panelMonitoreo.class.getName()).log(Level.SEVERE, null, ex);

                }

            }
        }).start();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // getGraficoPacientexProyectoyAno
        new Thread(panelMonitoreo::verBarra).start();
        int ano = Integer.parseInt(comboProyectoAno.getSelectedItem().toString());
        String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
        String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();
        String proyectox = Float.compare(comboProyecto.getSelectedIndex(), 0) == 0
                ? ""
                : comboProyecto.getSelectedItem().toString();
        new Thread(new Runnable() {
            @Override
            public void run() {
                new verGrafico(new Paciente().getGraficoPacientexProyectoyAno(proyectox, fecha01, fecha02), "Pacientes Registrados por Proyecto " + proyectox + " del a√±o " + ano).setVisible(true);
                panelMonitoreo.ocultarBarra();
            }
        }).start();


    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        tabla = new JTable();
        modelo = (DefaultTableModel) tabla.getModel();

        int ano = Integer.parseInt(comboProyectoMes.getSelectedItem().toString());
        String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
        String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();

        new Thread(panelMonitoreo::verBarra).start();
        new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    modelo.addColumn("#");
                    modelo.addColumn("Proyecto");
                    modelo.addColumn("Mes");
                    modelo.addColumn("Cantidad");

                    ArrayList<Paciente> pacientes
                            = (ArrayList) new Paciente().getPacientexProyecto("", fecha01, fecha02).clone();
                    int cont = 1;
                    ArrayList<Integer> mesesAcnur = new ArrayList();
                    ArrayList<Integer> mesesPDAF = new ArrayList();
                    for(int i=0; i<12;i++){
                        mesesAcnur.add(0);
                        mesesPDAF.add(0);
                    }
                    for (Paciente paciente : pacientes) {
                        Date fecha = new SimpleDateFormat("yyyy-MM-dd").parse(paciente.getFechaCreacion());
                        int mes = fecha.getMonth();
                        if(paciente.getProyecto().equalsIgnoreCase("acnur")){
                            mesesAcnur.set(mes,(mesesAcnur.get(mes)+1));
                        }else{
                            mesesPDAF.set(mes,(mesesPDAF.get(mes)+1));
                        }
                        
                    }
                    int temp=0;
                    for(int i=0; i<12; i++){
                        temp+=mesesAcnur.get(i);
                       modelo.addRow(new Object[]{cont++,
                           "ACNUR",new tools().getMes(i+1),mesesAcnur.get(i)
                    }); 
                    }
                    
                    modelo.addRow(new Object[]{
                        "","Total ACNUR al"+ano,"",temp
                    }); 
                    
                    
                    temp=0;
                    for(int i=0; i<12; i++){
                        temp+=mesesPDAF.get(i);
                        modelo.addRow(new Object[]{cont++,
                           "PDAF",new tools().getMes(i+1),mesesPDAF.get(i)
                    }); 
                    }
                    
                    modelo.addRow(new Object[]{
                        "","Total PDAF al"+ano,"",temp
                    });
                    
                    
                    new exportarExcel().exportarExcel(tabla, "Pacientes por Proyecto del a√±o " + ano);
                    new Thread(panelMonitoreo::ocultarBarra).start();
                } catch (IOException ex) {
                    Logger.getLogger(panelMonitoreo.class.getName()).log(Level.SEVERE, null, ex);

                } catch (ParseException ex) {
                    Logger.getLogger(panelFiltrosMonitoreo.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }).start();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        tabla = new JTable();
        modelo = (DefaultTableModel) tabla.getModel();

        int ano = Integer.parseInt(comboSexoAno.getSelectedItem().toString());
        String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
        String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();
        String generox = Float.compare(comboSexo.getSelectedIndex(), 0) == 0
                ? ""
                : comboSexo.getSelectedItem().toString();

        new Thread(panelMonitoreo::verBarra).start();
        new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    modelo.addColumn("#");
                    modelo.addColumn("ID");
                    modelo.addColumn("C√≥digo");
                    modelo.addColumn("Nombres");
                    modelo.addColumn("apellidos");
                    modelo.addColumn("Tipo de Documento");
                    modelo.addColumn("N¬∞ DNI");
                    modelo.addColumn("Genero");
                    modelo.addColumn("Fecha Creaci√≥n");
                    modelo.addColumn("Fecha Nacimiento");
                    modelo.addColumn("Total Sesiones");
                    modelo.addColumn("Telefono");
                    modelo.addColumn("TelefonoOpcional");
                    modelo.addColumn("Correo");
                    modelo.addColumn("Nacionalidad");
                    modelo.addColumn("Condici√≥n Migratoria");
                    modelo.addColumn("Departamento");
                    modelo.addColumn("Provincia");
                    modelo.addColumn("Distrito");
                    modelo.addColumn("Grupo Vulnerable");
                    modelo.addColumn("Discapacidad");
                    modelo.addColumn("¬øRed Soporte?");
                    modelo.addColumn("Nombre red Soporte");
                    modelo.addColumn("SRQ Inicial");
                    modelo.addColumn("Observaci√≥n");
                    modelo.addColumn("Proyecto");
                    modelo.addColumn("Motivo Consulta");
                    modelo.addColumn("Acciones");

                    ArrayList<Paciente> pacientes
                            = (ArrayList) new Paciente().getPacientexFechaCreacionyGenero(generox, fecha01, fecha02).clone();
                    int cont = 1;
                    for (Paciente paciente : pacientes) {
                        modelo.addRow(new Object[]{cont++,
                            paciente.getId(), paciente.getCodigo(), paciente.getNombres(), paciente.getApellidos(), paciente.getTipoDocumento(), paciente.getDni(), paciente.getGenero(),
                            paciente.getFechaCreacion(), paciente.getFechaNacimiento(), paciente.getTotalSesiones(), paciente.getTelefono(),paciente.getTelefonoOpcional(), paciente.getCorreo(), paciente.getNacionalidad(),
                            paciente.getCondicionMigratoria(), paciente.getDepartamento(), paciente.getProvincia(), paciente.getDistrito(), paciente.getGrupoVulnerable(), paciente.getDiscapacidad(), paciente.getRedSoporte(), paciente.getNombreRedSoporte(),
                            paciente.getSrqIngreso(), paciente.getObservacion(), paciente.getProyecto(), paciente.getMotivoConsulta(), paciente.getAcciones()
                        });
                    }
                    new exportarExcel().exportarExcel(tabla, "Pacientes Registrados de Genero " + generox + " del a√±o " + ano);
                    new Thread(panelMonitoreo::ocultarBarra).start();

                } catch (IOException ex) {
                    Logger.getLogger(panelMonitoreo.class.getName()).log(Level.SEVERE, null, ex);

                }

            }
        }).start();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        new Thread(panelMonitoreo::verBarra).start();
        int ano = Integer.parseInt(comboSexoAno.getSelectedItem().toString());
        String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
        String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();
        String generox = Float.compare(comboSexo.getSelectedIndex(), 0) == 0
                ? ""
                : comboSexo.getSelectedItem().toString();

        new Thread(new Runnable() {
            @Override
            public void run() {

                new verGrafico(new Paciente().getGraficoPacientexGeneroyAno(generox, fecha01, fecha02), "Pacientes Registrados de Genero " + generox + " del a√±o " + ano).setVisible(true);
                panelMonitoreo.ocultarBarra();
            }
        }).start();

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        tabla = new JTable();
        modelo = (DefaultTableModel) tabla.getModel();

        int ano = Integer.parseInt(comboIntencionAno.getSelectedItem().toString());
        String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
        String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();

        new Thread(panelMonitoreo::verBarra).start();
        new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    modelo.addColumn("#");
                    modelo.addColumn("ID Paciente");
                    modelo.addColumn("C√≥digo");
                    modelo.addColumn("Nombres");
                    modelo.addColumn("apellidos");
                    modelo.addColumn("Tipo de Documento");
                    modelo.addColumn("N¬∞ DNI");
                    modelo.addColumn("Genero");
                    modelo.addColumn("Fecha Creaci√≥n");
                    modelo.addColumn("Fecha Nacimiento");
                    modelo.addColumn("Total Sesiones");
                    modelo.addColumn("Telefono");
                    modelo.addColumn("TelefonoOpcional");
                    modelo.addColumn("Correo");
                    modelo.addColumn("Nacionalidad");
                    modelo.addColumn("Condici√≥n Migratoria");
                    modelo.addColumn("Departamento");
                    modelo.addColumn("Provincia");
                    modelo.addColumn("Distrito");
                    modelo.addColumn("Grupo Vulnerable");
                    modelo.addColumn("Discapacidad");
                    modelo.addColumn("¬øRed Soporte?");
                    modelo.addColumn("Nombre red Soporte");
                    modelo.addColumn("SRQ Inicial");
                    modelo.addColumn("Observaci√≥n");
                    modelo.addColumn("Proyecto");
                    modelo.addColumn("Motivo Consulta");
                    modelo.addColumn("Acciones");

                    modelo.addColumn("Encargado Evaluaci√≥n");
                    modelo.addColumn("ID SRQ");
                    modelo.addColumn("Fecha SRQ");
                    modelo.addColumn("Tipo Evaluaci√≥n");
                    modelo.addColumn("Lugar");
                    modelo.addColumn("Valor del Puntaje");
                    modelo.addColumn("Sumatoria");
                    modelo.addColumn("Estado Evaluaci√≥n");
                    modelo.addColumn("Respuesta #1");
                    modelo.addColumn("Respuesta #2");
                    modelo.addColumn("Respuesta #3");
                    modelo.addColumn("Respuesta #4");
                    modelo.addColumn("Respuesta #5");
                    modelo.addColumn("Respuesta #6");
                    modelo.addColumn("Respuesta #7");
                    modelo.addColumn("Respuesta #8");
                    modelo.addColumn("Respuesta #9");
                    modelo.addColumn("Respuesta #10");
                    modelo.addColumn("Respuesta #11");
                    modelo.addColumn("Respuesta #12");
                    modelo.addColumn("Respuesta #13");
                    modelo.addColumn("Respuesta #14");
                    modelo.addColumn("Respuesta #15");
                    modelo.addColumn("Respuesta #16");
                    modelo.addColumn("Respuesta #17");
                    modelo.addColumn("Respuesta #18");
                    modelo.addColumn("Observaci√≥n");

                    ArrayList<SRQ18> srqs
                            = (ArrayList) new SRQ18().ListaSRQ18conPacienteyTerapeutaxRango(fecha01, fecha02).clone();
                    int cont = 1;
                    for (SRQ18 srq : srqs) {

                        if (srq.getQ17().equalsIgnoreCase("si")) {
                            modelo.addRow(new Object[]{cont++,
                                srq.getPaciente().getId(), srq.getPaciente().getCodigo(), srq.getPaciente().getNombres(), srq.getPaciente().getApellidos(), srq.getPaciente().getTipoDocumento(), srq.getPaciente().getDni(), srq.getPaciente().getGenero(),
                                srq.getPaciente().getFechaCreacion(), srq.getPaciente().getFechaNacimiento(), srq.getPaciente().getTotalSesiones(), srq.getPaciente().getTelefono(),srq.getPaciente().getTelefonoOpcional(), srq.getPaciente().getCorreo(), srq.getPaciente().getNacionalidad(),
                                srq.getPaciente().getCondicionMigratoria(), srq.getPaciente().getDepartamento(), srq.getPaciente().getProvincia(), srq.getPaciente().getDistrito(), srq.getPaciente().getGrupoVulnerable(), srq.getPaciente().getDiscapacidad(), srq.getPaciente().getRedSoporte(), srq.getPaciente().getNombreRedSoporte(),
                                srq.getPaciente().getSrqIngreso(), srq.getPaciente().getObservacion(), srq.getPaciente().getProyecto(), srq.getPaciente().getMotivoConsulta(), srq.getPaciente().getAcciones(),
                                srq.getTerapeuta().getNombre(), srq.getId(), srq.getFechaSrq(), srq.getTipo(), srq.getLugar(),
                                srq.getPuntajeSi(), srq.getSumatoria(), srq.getEstado(),
                                srq.getQ1(), srq.getQ2(), srq.getQ3(), srq.getQ4(), srq.getQ5(),
                                srq.getQ6(), srq.getQ7(), srq.getQ8(), srq.getQ9(), srq.getQ10(),
                                srq.getQ11(), srq.getQ12(), srq.getQ13(), srq.getQ14(), srq.getQ15(),
                                srq.getQ16(), srq.getQ17(), srq.getQ18(), srq.getObservacionx()

                            });
                        }

                    }
                    new exportarExcel().exportarExcel(tabla, "Pacientes con intencion suicida durante el a√±o " + ano);
                    new Thread(panelMonitoreo::ocultarBarra).start();
                } catch (IOException ex) {
                    Logger.getLogger(panelMonitoreo.class.getName()).log(Level.SEVERE, null, ex);

                }

            }
        }).start();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        new Thread(panelMonitoreo::verBarra).start();
        int ano = Integer.parseInt(comboIntencionAno.getSelectedItem().toString());
        String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
        String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();
        new Thread(new Runnable() {
            @Override
            public void run() {

                new verGrafico(new Paciente().getGraficoPacienteConIntencionSuicida(fecha01, fecha02), "Pacientes con intencion suicida durante el a√±o " + ano).setVisible(true);
                new Thread(panelMonitoreo::ocultarBarra).start();
                panelMonitoreo.ocultarBarra();
            }
        }).start();


    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        
        JTable tabla = new JTable();
        DefaultTableModel modelo = (DefaultTableModel)tabla.getModel();
        try {
            int ano = 2022;
            String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
            String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();
        
            Calendar fechaInicialCalendar = Calendar.getInstance();
            Date fecha = new SimpleDateFormat("yyyy-MM-dd").parse(fecha01);
            fechaInicialCalendar.setTime(fecha);
            ArrayList<String> fechas = new ArrayList();

            fechaInicialCalendar.add(Calendar.DAY_OF_YEAR, -6);
            fechas.add(new SimpleDateFormat("yyyy-MM-dd").format(fechaInicialCalendar.getTime()));
            fechaInicialCalendar.set(Calendar.DAY_OF_MONTH, fechaInicialCalendar.getActualMaximum(Calendar.DAY_OF_MONTH));
            fechas.add(new SimpleDateFormat("yyyy-MM-dd").format(fechaInicialCalendar.getTime()));

            for (int i = 0; i < 12; i++) {
                for (int j = 1; j < 5; j++) {
                    if (j == 1 && i > 0) {

                        fechaInicialCalendar.add(Calendar.DAY_OF_YEAR, 1);
                        fechas.add(new SimpleDateFormat("yyyy-MM-dd").format(fechaInicialCalendar.getTime()));
                        fechaInicialCalendar.set(Calendar.DAY_OF_MONTH, fechaInicialCalendar.getActualMaximum(Calendar.DAY_OF_MONTH));
                        fechas.add(new SimpleDateFormat("yyyy-MM-dd").format(fechaInicialCalendar.getTime()));

                    } else if (j == 2) {
                        fechaInicialCalendar.add(Calendar.DAY_OF_YEAR, 1);
                        fechas.add(new SimpleDateFormat("yyyy-MM-dd").format(fechaInicialCalendar.getTime()));
                        fechaInicialCalendar.add(Calendar.DAY_OF_YEAR, 6);
                        fechas.add(new SimpleDateFormat("yyyy-MM-dd").format(fechaInicialCalendar.getTime()));
                    } else if (j == 3 || j == 4) {
                        fechaInicialCalendar.add(Calendar.DAY_OF_YEAR, 1);
                        fechas.add(new SimpleDateFormat("yyyy-MM-dd").format(fechaInicialCalendar.getTime()));
                        fechaInicialCalendar.add(Calendar.DAY_OF_YEAR, 8);
                        fechas.add(new SimpleDateFormat("yyyy-MM-dd").format(fechaInicialCalendar.getTime()));
                    }
                }
            }

            tabla = new JTable();
            modelo = (DefaultTableModel) tabla.getModel();
            modelo.addColumn("N¬∞");
            modelo.addColumn("Usuario/a y/o Paciente");
            for (int i = 0; i < fechas.size(); i++) {
                modelo.addColumn(fechas.get(i++).substring(8, 10) + " al " + fechas.get(i).substring(8, 10));
            }
            modelo.addColumn("Totales por Usuarios");

            ArrayList<Paciente> pacientes
                    = (ArrayList) new Paciente().getPacientexFechaCreacion(fecha01, fecha02).clone();
            int cont=1;
            int totalUsuarios = 0;
            ArrayList<Integer> ct = new ArrayList();
                for(int i=0;i<48;i++){
                    ct.add(0);
                }
            ArrayList<Integer> cm = new ArrayList();
                for(int i=0;i<12;i++){
                    cm.add(0);
                }
            for (Paciente paciente : pacientes) {
                int totalxUsuario = 0;
                ArrayList<Integer> cc = new ArrayList();
                for(int i=0;i<48;i++){
                    cc.add(0);
                }
                for (NotaEvolucion nota : paciente.getNotas()) {
                    Date ini = new SimpleDateFormat("yyyy-MM-dd").parse(nota.getFechaNota());
                    int index=0;

                    for(int i=0; i<fechas.size() || index<1;i++){
                      Date t1 = new SimpleDateFormat("yyyy-MM-dd").parse(fechas.get(i++));
                      Date t2 = new SimpleDateFormat("yyyy-MM-dd").parse(fechas.get(i));
                      
                      if (t1.compareTo(ini) <= 0 && t2.compareTo(ini) >= 0) {
                             index = i/2;
                             cc.set(index,(cc.get(index)+1));
                             ct.set(index,(ct.get(index)+1));
                             totalUsuarios++;
                             totalxUsuario++;
                             
                             index = i/8;
                             cm.set(index,(cm.get(index)+1));
                             
                        }
                    }
                    
                }
                //Agregamos cada paciente con sus sesiones durante el a√±o y su total (fila completa del reporte)
                modelo.addRow(new Object[]{cont++,
                paciente.getNombreCompleto(),
                cc.get(0),cc.get(1),cc.get(2),cc.get(3),cc.get(4),cc.get(5),cc.get(6),cc.get(7),cc.get(8),cc.get(9),cc.get(10),
                cc.get(11),cc.get(12),cc.get(13),cc.get(14),cc.get(15),cc.get(16),cc.get(17),cc.get(18),cc.get(19),cc.get(20),
                cc.get(21),cc.get(22),cc.get(23),cc.get(24),cc.get(25),cc.get(26),cc.get(27),cc.get(28),cc.get(29),cc.get(30),
                cc.get(31),cc.get(32),cc.get(33),cc.get(34),cc.get(35),cc.get(36),cc.get(37),cc.get(38),cc.get(39),cc.get(40),
                cc.get(41),cc.get(42),cc.get(43),cc.get(44),cc.get(45),cc.get(46),cc.get(47),
                totalxUsuario
                
                });
            }
            // agregamos los totales por cada semana del a√±o y el total de todos los usuarios
           modelo.addRow(new Object[]{ "",
               "Totales por",
               ct.get(0),ct.get(1),ct.get(2),ct.get(3),ct.get(4),ct.get(5),ct.get(6),ct.get(7),ct.get(8),ct.get(9),ct.get(10),
                ct.get(11),ct.get(12),ct.get(13),ct.get(14),ct.get(15),ct.get(16),ct.get(17),ct.get(18),ct.get(19),ct.get(20),
                ct.get(21),ct.get(22),ct.get(23),ct.get(24),ct.get(25),ct.get(26),ct.get(27),ct.get(28),ct.get(29),ct.get(30),
                ct.get(31),ct.get(32),ct.get(33),ct.get(34),ct.get(35),ct.get(36),ct.get(37),ct.get(38),ct.get(39),ct.get(40),
                ct.get(41),ct.get(42),ct.get(43),ct.get(44),ct.get(45),ct.get(46),ct.get(47),
                totalUsuarios
           
           });
           // agregamos los totals por cada mes
           modelo.addRow(new Object[]{"","",
               cm.get(0),"","","",cm.get(1),"","","",cm.get(2),"","","",cm.get(3),"","","",
               cm.get(4),"","","",cm.get(5),"","","",cm.get(6),"","","",cm.get(7),"","","",
               cm.get(8),"","","",cm.get(9),"","","",cm.get(10),"","","",cm.get(11),"","","",""
               
           });
           
           
            try {
                new exportarExcel().exportarExcelGGP(tabla,"Reporte General de Sesiones");
            } catch (IOException ex) {
                Logger.getLogger(panelFiltrosMonitoreo.class.getName()).log(Level.SEVERE, null, ex);
            }
           
           
        } catch (ParseException ex) {
            Logger.getLogger(panelFiltrosMonitoreo.class.getName()).log(Level.SEVERE, null, ex);
        }   
                    
       
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        tabla = new JTable();
        modelo = (DefaultTableModel) tabla.getModel();

        int ano = Integer.parseInt(comboGrupoVulnerableAno.getSelectedItem().toString());
        String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
        String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();
        String grupo = Float.compare(comboGrupoVulnerable.getSelectedIndex(), 0) == 0
                ? ""
                : comboGrupoVulnerable.getSelectedItem().toString();
        new Thread(panelMonitoreo::verBarra).start();
        new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    modelo.addColumn("#");
                    modelo.addColumn("ID");
                    modelo.addColumn("C√≥digo");
                    modelo.addColumn("Nombres");
                    modelo.addColumn("apellidos");
                    modelo.addColumn("Tipo de Documento");
                    modelo.addColumn("N¬∞ DNI");
                    modelo.addColumn("Genero");
                    modelo.addColumn("Fecha Creaci√≥n");
                    modelo.addColumn("Fecha Nacimiento");
                    modelo.addColumn("Total Sesiones");
                    modelo.addColumn("Telefono");
                    modelo.addColumn("TelefonoOpcional");
                    modelo.addColumn("Correo");
                    modelo.addColumn("Nacionalidad");
                    modelo.addColumn("Condici√≥n Migratoria");
                    modelo.addColumn("Departamento");
                    modelo.addColumn("Provincia");
                    modelo.addColumn("Distrito");
                    modelo.addColumn("Grupo Vulnerable");
                    modelo.addColumn("Discapacidad");
                    modelo.addColumn("¬øRed Soporte?");
                    modelo.addColumn("Nombre red Soporte");
                    modelo.addColumn("SRQ Inicial");
                    modelo.addColumn("Observaci√≥n");
                    modelo.addColumn("Proyecto");
                    modelo.addColumn("Motivo Consulta");
                    modelo.addColumn("Acciones");

                    ArrayList<Paciente> pacientes
                            = (ArrayList) new Paciente().getPacientexGrupoVulnerable(grupo, fecha01, fecha02).clone();
                    int cont = 1;
                    for (Paciente paciente : pacientes) {
                        modelo.addRow(new Object[]{cont++,
                            paciente.getId(), paciente.getCodigo(), paciente.getNombres(), paciente.getApellidos(), paciente.getTipoDocumento(), paciente.getDni(), paciente.getGenero(),
                            paciente.getFechaCreacion(), paciente.getFechaNacimiento(), paciente.getTotalSesiones(), paciente.getTelefono(),paciente.getTelefonoOpcional(), paciente.getCorreo(), paciente.getNacionalidad(),
                            paciente.getCondicionMigratoria(), paciente.getDepartamento(), paciente.getProvincia(), paciente.getDistrito(), paciente.getGrupoVulnerable(), paciente.getDiscapacidad(), paciente.getRedSoporte(), paciente.getNombreRedSoporte(),
                            paciente.getSrqIngreso(), paciente.getObservacion(), paciente.getProyecto(), paciente.getMotivoConsulta(), paciente.getAcciones()
                        });
                    }
                    new exportarExcel().exportarExcel(tabla, "Pacientes Registrados del Grupo Vulnerable " + grupo + " del a√±o " + ano);
                    new Thread(panelMonitoreo::ocultarBarra).start();
                } catch (IOException ex) {
                    Logger.getLogger(panelMonitoreo.class.getName()).log(Level.SEVERE, null, ex);

                }

            }
        }).start();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        new Thread(panelMonitoreo::verBarra).start();
        int ano = Integer.parseInt(comboGrupoVulnerableAno.getSelectedItem().toString());
        String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
        String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();
        String grupo = Float.compare(comboGrupoVulnerable.getSelectedIndex(), 0) == 0
                ? ""
                : comboGrupoVulnerable.getSelectedItem().toString();
        new Thread(new Runnable() {
            @Override
            public void run() {
                new verGrafico(new Paciente().getGraficoPacientexGrupoVulnerableyAno(grupo, fecha01, fecha02), "Pacientes Registrados del Grupo Vulnerable " + grupo + " del a√±o " + ano).setVisible(true);
                new Thread(panelMonitoreo::ocultarBarra).start();
                panelMonitoreo.ocultarBarra();
            }
        }).start();


    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
       tabla = new JTable();
        modelo = (DefaultTableModel) tabla.getModel();

        int ano = Integer.parseInt(comboSesionesResumen.getSelectedItem().toString());
        String fecha01 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearFirst(ano)).toString();
        String fecha02 = new SimpleDateFormat("yyyy-MM-dd").format(new tools().getCurrYearLast(ano)).toString();

        new Thread(panelMonitoreo::verBarra).start();
        new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    modelo.addColumn("#");
                    modelo.addColumn("Nombre del Paciente");
                    modelo.addColumn("Proyecto");
                    modelo.addColumn("Cantidad Sesiones");

                    ArrayList<Paciente> pacientes
                            = (ArrayList) new Paciente().getPacientexFechaCreacion(fecha01, fecha02).clone();
                    int cont = 1;
                   
                    for(Paciente paciente:pacientes){
                        modelo.addRow(new Object[]{cont++,
                        paciente.getNombreCompleto(),paciente.getProyecto(),
                        paciente.getNotas().size()
                        });
                    }
                    
                    
                    
                    new exportarExcel().exportarExcel(tabla, "Pacientes por Proyecto del a√±o " + ano);
                    new Thread(panelMonitoreo::ocultarBarra).start();
                } catch (IOException ex) {
                    Logger.getLogger(panelMonitoreo.class.getName()).log(Level.SEVERE, null, ex);

                } 

            }
        }).start();
    }//GEN-LAST:event_jButton14ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboGrupoVulnerable;
    private javax.swing.JComboBox<String> comboGrupoVulnerableAno;
    private javax.swing.JComboBox<String> comboIntencionAno;
    private javax.swing.JComboBox<String> comboProyecto;
    private javax.swing.JComboBox<String> comboProyectoAno;
    private javax.swing.JComboBox<String> comboProyectoMes;
    private javax.swing.JComboBox<String> comboResumenGeneralAno;
    private javax.swing.JComboBox<String> comboSesionesResumen;
    private javax.swing.JComboBox<String> comboSexo;
    private javax.swing.JComboBox<String> comboSexoAno;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private rojeru_san.rspanel.RSPanelRound rSPanelRound1;
    private rojeru_san.rspanel.RSPanelRound rSPanelRound2;
    private rojeru_san.rspanel.RSPanelRound rSPanelRound3;
    private rojeru_san.rspanel.RSPanelRound rSPanelRound4;
    private rojeru_san.rspanel.RSPanelRound rSPanelRound5;
    private rojeru_san.rspanel.RSPanelRound rSPanelRound6;
    private rojeru_san.rspanel.RSPanelRound rSPanelRound7;
    // End of variables declaration//GEN-END:variables
private void llenarCombos() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                ArrayList<Generos> generos = (ArrayList) new Generos().Listar("").clone();
                comboSexo.removeAllItems();
                comboSexo.addItem("Todos");
                for (Generos genero : generos) {
                    comboSexo.addItem(genero.getNombre());
                }
            }
        }).start();

        ArrayList<GrupoVulnerable> grupos = (ArrayList) new GrupoVulnerable().Listar("").clone();
        comboGrupoVulnerable.removeAllItems();
        comboGrupoVulnerable.addItem("Todos");
        for (GrupoVulnerable grupo : grupos) {
            comboSexo.addItem(grupo.getNombre());
        }

    }

}
